**************ReactJs Google Notes********************
-JS library to buliding UI
-Declarative 
	-In react DOM is declarative (we never intract with DOM)
-Component
	-Building block of react app
	-component are JS class or function optionally take input(properties i.e props) and return react
		element	that describe how a section of the UI should appear.
***************************Getting Started***************************
#Introduction
-Liberary for highly reactive and superfast javascript driven web application.
-React is javascript library.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#What is REACT?
-React is Javascript library for building User Interfaces.
-It is about building javascript driven apps.
-React app run in the browser not on server.Dont have to wait for server response.
-React use Component to build UI.Component helps to keep our code manageable, maintainable and reusable piece of code.
-You can split the UI in different react component and reuse them any where.(like Header component, sidebar component etc)
-Ex- If you have a list item component and you want to output an list of list item you have to write code once and can 	easily reuse it.
-React component can be thought of as custom HTML elements.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Real-world SPA's and React Web Apps
-With component you build your own HTML elements.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Writing our First React code
-Use codepen.io as a web editor.
-Now the repeated div can be consider as a component.(Ex- person div).So we use REACT for reusable component here.
-To use react we need to first Import some external javascript libraries.
-We also need to import library for REACT DOM.
-React itself kind of is the logic we need for creating these React components(React is all about component),DOM is then about rendering these component to the real DOM.
-React also uses a special JAVASCRIPT syntax and a lot of next generation javascript features.
-To unlock the usage of these features and special syntax we have to use Babel.
-Babel is a tool which compiles the next generation Javascript code you are writing here to code thats run fine in the browser
-Create React component so that we have reusable custom HTML element we can reuse insted of repeating html div multiple time.
-React component is just a function and may be named as custom HTML element.
	-Component should return the code that you actually want to render to the DOM.For that react uses a special syntax which is called JSX.Use parentheses to return multiline code.
	-Babel allowed us to mix the javascript and HTML element(which is looks like html but which isn,t it's all about JSX this get compiles to normal JS code)
	-To turn this function into react component, we actually have to use react to render it to the screen.
	-React package responsible for correctly parse the JSX code.
-ReactDOM. 	
	-This actually exposes an object.
	-ReactDOM.react() allowed us to render a javascript function as a component to the real DOM.
	-We render the function not by referencing it but by turning it into a HTML element, behind the scenes using the JSX syntex.
-Component in react can configured dynamically as we need them.
-The concept of passing argumrnt in React function is called props.prop contain all the attributes I add to my own component.
-JSX has the requirement of the only having one root element.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Why Should we Choose React?
-UI state becomes difficult to handle with Vanilla JavaScript.
-Focus on business logic not on preventing your App form exploding.
-Huge ecosystem, Active community, High performance.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#React Alternatives
-Angular
-Vue
-Backbone
-Ember
-Jquery - It is only about traversing the DOM and targeting elements in the DOM.
-React is about just declaring what you see and focusing on the logic instead of focusing on the how.
-This framework allows us to focus on the logic and your business model and not so much on the technical side of the DOM element you want to reaching to change.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding Single page applications and multi page application
-With React,Angular or Vue we can create 2 kind of application SPA or MPA.
-SPA
	-We only get back only one single HTML file from the server when user visit the www.example.com there after everything is managed with JS or Js framework.The entire page consist of component which are rendered and handled by JS.
	-If we manage entire page by JS we never have to go back to the server and reload the page.This will improve user experience.Everything happen instently.
	-IN SPA page built up with component and every component is a react component, and entire page also managed by root react component.
	-Here generally we only have only one ReactDOM.render() call.
	-We only have one root app component which is mounted on the DOM which host all other react component.
-MPA
	-Here we get multiple HTML pages, where each page has the content for a given route. Ex- www.example.com/user
	-Here we also use react but only to create little widgets.We only dump individual content component but not the entire page is managed by react.
	-Here we split up our app into theoretical components,but actually a lot of page is just going to be a normal HTML and CSS code and some widget we dump in like image gallary that is managed by react.
	-The entire page is not under react control.The individual widget dont know of each other existance.
	-Here we called ReactDOM.render() more often to render our different widget.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
***************************Refreshing next generation JAVASCRIPT***************************
#Module Introduction(Next-Gen Javascript)
-This is all about ES6 and next generation syntex.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding "let" and "const" and "var"
-"let" and "const" are different ways of creating variables.
-"var" is used to create variable in JavaScript.
-In ES6 two different keyword were introduce let and const.
-A "let" is like new "var" but they are different in SCOPE.
-Use const if you plan on creating a constant value.
-If you try to change const variable you will get an error.
-var and let are both used for variable declaration in javascript but the difference between them is that var is function scoped and let is block scoped.
-It can be said that a variable declared with var is defined throughout the program as compared to let.
-calling var before definition will return undefined.
-calling let a before definition will give Refrencerror.
-At the top level, let, unlike var, does not create a property on the global object.
-In strict mode, var will let you re-declare the same variable in the same scope while let raises a SyntaxError.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Arrow Functions
-It's a different syntex for creating JavaScript functions.
-const myFunc = (list of arguments) => { fxn body}.
-Its bit shorter then noral function syntex.
-It also solves issue with "this" keyword.
-Examples
//Normal function
function printMyName(name)
{
  console.log(name);
}

//Arrow function
const printMyName = (name) =>
{
  console.log(name);
}

//If you only have ONE argument then
const printMyName = name =>
{
  console.log(name);
}

//if function return something
const multiply = (number) => {
return number*2;
}

//Shortern syntax
const multiply = number => number * 2;

printMyName('Pranay');
console.log(multiply(2)); //4
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Exports and Imports
-Helps in writing Modular code.(JS code you split up over multiple file.)
-Two types of imports default and named.
-In default import even if you not specify the name of function you want to import it automatically import default function.
-In named function you have to explicitly import the function using {}. (we export the function by Name thats why named export.)
-Example :
	-person.js 
		-export default person
	-utility.js
		-export const clean
		-export const baseData
		
	-app.js
		-import per from './person.js' //Default import
		-import {clean} from './utility.js' //named import
		-import {baseData} from './utility.js'  //named import
		-import {clean as Clean,baseData} form 'utility.js' //named import
		-import * as bundled from 'utility.js'
		
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding Classes
-Another core feature of next generation JS is classes.
-Classes are essentially blueprint of objects.
-Class can have both properties and methods.
-Methods - function attached to class.
-Properties - variable attached to class.
-Class is instantiated with "new" keyword.
-Class also support inheritance.(If you define constructor then remember to call super constructor in derived class using Super() method)
-Classes is used by React to create its components.
-Example
//Class Human
class Human {
  constructor(){
    this.gender = 'male';
  }
  
  printGender(){
    console.log(this.gender);
  }
}

//Class extends Human
class Person extends Human {
  constructor() {
    super();//calling base class constructor.
      this.name = 'Max';
  }
  
  printMyName(){
    console.log(this.name);
  } 
}

//instantiate class
const person = new Person();
person.printMyName();
person.printGender();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Classes, properties and Methods
-Next generation JS also offers a different syntex of initilizing properties and methods.
-In ES7 you can assign a property directly 	inside your class with myProperty equals value.(i.e. you can skip the constructor function call.But behind the scene it will call constructor)
-Simillarly for methods we can use arrow function which helps to reduce complexity of this keyword.
-Example
class Human {
  gender = 'male';
  
  printGender = () => {
    console.log(this.gender);
  }
}

class Person extends Human {
  name = 'Max';
  gender = 'female';
  
  printMyName = () => {
    console.log(this.name);
  } 
}

const person = new Person();
 person.printMyName();
person.printGender();
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Spread & Rest Operators
-Its only one operator i.e. ...(3 dots)
-Spread = useed to split up array element OR object properties.
-Rest = Used to merge a list of function arguments into an array.(We used in function argument list, it merge argument into an array)
-Example 
//Array
const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5];
console.log(newNumbers);

//Object
const person = {
  name : 'Pranay'
};
const newPerson = {
  ...person,
  age : 28
};
console.log(newPerson);

//Restconst filter = (...args) => {
  return args.filter(el => el === 1);
} 

console.log(filter(1, 2, 3));
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Destructuring
-It allows you to easily extract array element or object properties and stored them in variables.
-Spread takes out all element or all properties and distributes them in a new array or object or whatever you are using it.
-Destructuring allows us to  pull out single elements or properties and stored them in variables for arrays and for objects.
-Example
//Array Destructuring
const numbers = [1, 2, 3];
[num1, , num3] = numbers;
console.log(num1,num3)

//object destructuring
{name} = {name : 'Pranay',age : 24};
console.log(name);//Pranay
console.log(age);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Reference and Primitive Type Refresher
-We have refrence and primitive type in javascript.
-Primitive types
	const number = 2;
	const num2 = number;//Actual copy of number
	-number, string, boolean this are primitive type.
-Refrence type
	-object and arrays are refrence types.
	-Changes in original object also reflect in refrence object.Sometime this leads to an unexpected behaviour.
	const person = {
	  name : 'Pranay'
	};

	const secondPerson = person;
	person.name = 'Ritika';
	console.log(secondPerson);//Ritika
	-To actually copy the object or array we use ... operator.
	const secondPerson = {
		...person
	}
	-The spread operator pull out the properties from person object and assigned it to secondPerson.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Refreshing Array Functions
-map() takes function as parameter and then execute them on each element of an array.
const number = [1, 2, 3];
const doubleNumArray = number.map((num) => num * 2);
console.log(number);
console.log(doubleNumArray);
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
***************************Understanding the base features & Syntax***************************
#The Basic
-All core react concepts
-Discuss what all its take to build reactapp on local machine.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#The Building Workflow
-Why we need complex workflow while working locally.
	-To optimize code - Code should be as small as possible and optimized as possible.
	-To use next-generation JS features.(ES6 vs ES5)
	-We want to be able to write ES6 or above code and still ship code in the end that runs on as many browser as possible.
	-More productive - This incude next-generation JS feature that allowes us to write more condensed code, but it also include things like CSS auto-prefixing.
	-CSS prefixing are thing to achieve broadest possible browser support for CSS feature.
	-Linting - Tool that actually warns you if you are writing sub-optimal code.
-How do we achieve such a workflow?
	-Use Dependency management tool(3rd party library JS package) like npm or yarn.
		-React, ReactDOM, compiler for next-generation JS to current gen JS is also dependency.
	-We need Bundler(recommended WebPack ) because we want to write moduler code and split it up over multiple file so the each file has a clear task, a clear focus and easy for us to manage.
		-We want to make sure that all this code get bundeled into a couple of file in the end when we ship it.
	-Use babel + preset 
	-Need development server to test our app.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Using Create React App
-At root level we have couple of configuration file.
-package-lock.json - They are just locking in the version of dependency we are using.
-package.json - The general dependency our package has are defined in the package.json files.
	-react-script : It is a package offering all this build workflow,this development server, the next-generation JS features support.
	-Also there is some script define.You can run this script by npm run and then the script name. 
-node_module : holds all the dependencies and sub-dependencies of our project.(react-script has lots of other depenedency then react and reactDOM)
-public : The root folder which gets served by the web server in the end, though here it only hold the file we can edit.
	-index.html - We will use this page only to create SPA.
	-We mount our react application in div with id = "root"
	-manifest.json - Define meta-data about our application.
-scr : Script file were added here.This are actually a file where we are working, actually  our react application.
	-index.js - get access to this root element in our DOM, in our HTML file.It render our react application with the render method.Here we refrence some "App" object or element which we import from an app file.
	-App.js - Define App component, the first component our application have right now.
	-App.css - some styling that we use in a App.js file.
	-Index.css - Apply style globally.Define some general style for body of our application.
	-registerServiceWorker.js - Importent for registering service worker which is generated automatically thats related to progeressive web app we get out of the box.It will basically pre-cache our script file.
	-App.test.js - Allow us to create unit tests for the different units. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding Component Basics
-Component create basic custom HTML element sometime.
-Typically we render one root component,generally named App component but you can rename whatever.
-In App we can nest all other components.
-In App.js 
	-We import react and component form react.
		-react : responsible for rendering anything to dom.
		-Component class : to inherit by Our Class to become a component.
-Our component should return html or should render something HTML.
-You also might see react component with .jsx as a file extension insted of js.The reason for this is the code we have written in JSX code in render function or in component body.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding JSX
-The JSX syntex written as 
return (
      <div className="App">
        <h1>Hi, I'm a React App</h1>
      </div>
    );
-Equivalent to or (Compiles to )return React.createElement('div',{className:'App' },React.createElement('h1',null,'I\'m a React App'));
-This is one of the reason that we import React from 'react'.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#JSX Restrictions
-You cannot use "class" keyword in JSX bcoz it is reserved keyword in javascript.
-The value we pass in 1st argument is actually provide or managed by react library.(We are not using real HTML tag)
-JSX expression must have one root element only.But in react 16 this is kind of loosened.But best practice is wrap everything in one root element.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Creating a Functional Component
-As a convention you should give you Folder and file name a capital start.
-We have 2 ways to create component.
	-extend component class. Usefull when we use stats in component(Class based components)
	-Define normal JS class and return JSX. Dont forget to import react and export function to default.(functional component)
-Import should have Upper case as all lower case is generally used by html tag in JSX.
-If we dont have anything to nested we can only use self closing tag only for custom tag.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Working with components and Re-Using Them
-Component are awesome because we can focus our code in each file and hence make it much more maintainable.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Outputting Dynamic Content
-If you have any dynamic content with your JSX and you want to execute as javascript code, you have to wrap code in single curly braces.<p>I'm person and I'm {Math.floor(Math.random() * 30)} years old!!</p>
-You can execute any one line expression in this curly braces.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Working with Props
-Make your component configurable,flexible and dynamic use object name "props".
-React by default an argument by default (generally called props but you can name other) with all the properties of this component.(Properties is attribute you add in your component when you calling component)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding the "children" Properties
-React gives us a special props called props.children.
-children include any plain text that we include in between start and closing tag of component.
-You can also include HTML as well.Also it can be other react component or anything.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Understanding and Using State
-Props is simply an object give us access to all the attribute we pass to our own components.
-There is a special property you can define in any component which extends component called STATE.
-You cant define property in any normal function, in function you can only use some const or var.
-As props are set and passed from outside, state is managed from inside a component.
-State only available in class based React Component.
-In React 16.8 the react hook provide new way so now we can use state in functional component as well.
-State should used with care because it makes your application unpredictable and unmanagable.
-State is used if we want to managed some component internal data.
-We assign some value to state, here we assign javascript object to state.
-this refer to the class as we are using ES6 syntax.
-state can be changed, and when its changes, it will lead REact to re-render our DOM or to update the DOM.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Handling Events and Methods
-In html button click event named as onclick but in JSX it is onClick.
-As a good paractice use methodNameHandler as method name for onClick event.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Manipulating the State
-By extending the component we get special state property called setState property, this properties allowed us to update this special state property here and it will then ensure that the react get to know about this update and update the DOM.
-Set state takes an object as an argument and it will merge whatever we define here with our existing state.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Using the useState() Hook for State Manipulation
-Prior to REACT Version 16.8 "setState" was the only way of managing states in React Applications.
-Since React 16.8, there is a way to manage state in functional components with a feature called React Hooks.
-React Hook is basically a function exposed to you by react which you can use in functional components.
-useState return an array with exactely two elements and always two elements.
	-firstElement = Always be our current state(Object we passed in useState).
	-secondElement = function that allows us to update the state(mention in useState method or value of firstElement)
-We use array destructuring feature to get back value from useState().
-The importatnt difference between React Hook and class based setState is that the useState's  secondElement dosent merge whatever you pass to it with the old state, insted it replace old state with it.You have to manually all other state properties.
-But insted of add manually in react hook you can use useState() multiple time.So add one more useState() for other object as well.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Stateless vs Stateful Components
-Stateful component that manages state(also called smart component or container component bcoz contain state of your component)
-Stateless components dosent have any internal state management.(also called dumb or presentational component)
-Try to implement as much as stateless component then stateful component. It will make your app easy maintainable.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Passing Method Reference Between Component 
-We can pass a refrence to the handler as a property to our component.
-You can pass method as a props, so that you can call a method whic might change the state in another component which shouldn't have the direct access to the state.
-You can pass down click handlers which allows you to change data in hr parents component(in the app component in our case for person component)
-You can pass value to our function or handler.Now to pass data to function or handler we have 2 ways.
	- called bind() with 2 argument.(Recommended)
	- Execute an arrow function on "onClick" method.(Not recommended)
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Adding two way binding
-By two way binding you can update content dynamically.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Adding Styling With Stylesheet
-Two ways of implement styling.
-Web pack which is build tool which is end used by this react script package we're using implicetly.
-Wepack enable us to import css into javascript.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Working with Inline Style
- JSX provide style attribute.
-Use Inline styling whenever you want to scope to style and make sure it only applies to this single element 
and no other element in your app or even in the same component.
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#Note from assignments
-There is two ways to define methods. One is using const and arrow function.
	-Use this when we are plan to use this keyword inside the method with encapsulate the this keyword refrence to the class variable.
-Another is simple render(){};
	-Here this refer to class.But if you want to use it as a handler at that time it will no longer refer to class variable
	due to way how JS works when execute code at runtime.
-
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
